"use strict";(self.webpackChunkwebsite_2=self.webpackChunkwebsite_2||[]).push([[543],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return y}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},o={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),l=d(n),y=i,m=l["".concat(s,".").concat(y)]||l[y]||o[y]||a;return n?r.createElement(m,u(u({ref:t},c),{},{components:n})):r.createElement(m,u({ref:t},c))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,u=new Array(a);u[0]=l;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,u[1]=p;for(var d=2;d<a;d++)u[d]=n[d];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},461:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return l}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),u=["components"],p={title:"C\u1ea5u tr\xfac d\u1eef li\u1ec7u"},s=void 0,d={unversionedId:"overview/database_struct",id:"overview/database_struct",isDocsHomePage:!1,title:"C\u1ea5u tr\xfac d\u1eef li\u1ec7u",description:"Users",source:"@site/docs/overview/database_struct.md",sourceDirName:"overview",slug:"/overview/database_struct",permalink:"/iot-server/docs/overview/database_struct",tags:[],version:"current",lastUpdatedBy:"tranphuong.080",lastUpdatedAt:1633072065,formattedLastUpdatedAt:"10/1/2021",frontMatter:{title:"C\u1ea5u tr\xfac d\u1eef li\u1ec7u"},sidebar:"overview",previous:{title:"HTTP",permalink:"/iot-server/docs/overview/security/http"}},c=[{value:"Users",id:"users",children:[{value:"Schema",id:"schema",children:[]}]},{value:"Devices",id:"devices",children:[{value:"Schema",id:"schema-1",children:[]}]},{value:"Relations",id:"relations",children:[{value:"Schema",id:"schema-2",children:[]}]},{value:"Devices Events",id:"devices-events",children:[{value:"Schema",id:"schema-3",children:[]}]},{value:"User Events",id:"user-events",children:[{value:"Schema",id:"schema-4",children:[]}]},{value:"Roles",id:"roles",children:[{value:"Schema",id:"schema-5",children:[]}]}],o={toc:c};function l(e){var t=e.components,n=(0,i.Z)(e,u);return(0,a.kt)("wrapper",(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"users"},"Users"),(0,a.kt)("h3",{id:"schema"},"Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"mongooseClient.Schema({\n    _id : { type: Schema.Types.ObjectId, index: true, unique: true, required: true },\n    username: {type: String, unique: true, required: true, index: true},\n    manufacturerId: { type: Schema.Types.ObjectId, index: true, sparse: true }, //\n\n    facebookId: {type: String, unique: true, index: true, sparse: true},\n    googleId: {type: String, unique: true, index: true, sparse: true},\n    accountkitId: {type: String, unique: true, index: true, sparse: true},\n    appleId: {type: String, unique: true, index: true, sparse: true},\n\n    facebookToken: {type: String },\n    googleToken: {type: String },\n    accountkitToken: {type: String },\n\n    googleAssistant: { type: Boolean, default: false },\n    maikaAssistant: { type: Boolean, default: false },\n\n    group: { type: Boolean, default: false },\n    roles: { type: Array, default: ['user']}, // ['admin']  // ['user']\n\n    name: {type: String},\n    email: {type: String},\n    phoneNumber: {type: String},\n    photo: {type: String},\n    addr: {type: String},\n\n    userSetting: Schema.Types.Mixed,\n    profile: Schema.Types.Mixed,\n\n    trustedClientIds: [{ type: String }],\n\n  }, {\n    timestamps: true\n  });\n")),(0,a.kt)("h2",{id:"devices"},"Devices"),(0,a.kt)("h3",{id:"schema-1"},"Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"mongooseClient.Schema({\n  _id : { type: Schema.Types.ObjectId, index: true, unique: true, required: true },\n\n  productId: {type: String, unique: true, index: true, required: true },\n  manufacturerId: { type: Schema.Types.ObjectId, index: true, sparse: true }, //\n  virtual: {type: Boolean, default: false},\n  roles: {type: Array, default: ['device']},\n  image: {type: String },\n  description: {type: String},\n  hardwareVersion: {type: String, default: '1'},\n  hardwareVerOfFirm: {type: String, default: '1'},\n  firmwareVersion: {type: Number, default: 1},\n  mcuFirmVer: {type: Number, default: 1},\n\n  status: {type: String, default: 'OFFLINE', enum: ['OFFLINE', 'ONLINE'] },\n  statusByProtocols: { type: Schema.Types.Mixed, default: {} },\n\n  activated: {type: Boolean, default: true},\n  systemStatus: {type: String, default: 'PLACEHOLDER', index: true, sparse: true}, // enum: ['PLACEHOLDER', 'PRODUCING', 'TESTING', 'USECASE_TESTING', 'PACKING', 'STORING', 'DISTRIBUTION', 'INUSED', 'INWILD', 'WARRANTY' ]\n\n  deviceTypeId: { type: Schema.Types.ObjectId, required: true, index: true },\n\n  ipAddress: {type: String},\n  location: {type: geoSchema, index: '2dsphere'},\n\n  propertiesValue: { type: Schema.Types.Mixed, default: {} },\n\n  warrantyActivationTime: { type: Date },\n\n  deviceTypeInfoOverride: {\n    properties: [{\n      name: {type: String, required: true },\n      unit: {type: String },\n      displayName: {type: String },\n      icon: {type: String },\n      description: {type: String},\n      propertyId: { type: Schema.Types.ObjectId }, // link to devices-properties-model\n      localId: {type: String },\n      code: {type: String},\n      unSupported: {type: Boolean},\n      systemOnly: {type: Boolean}, // this field indicate properties only use by system , not device\n      roles: [{\n        _id: false,\n        name: { type: String }, // ['admin'] ['manager'] // ['user'] ['guest']\n        forbidden: {type: Boolean, default: true},\n        permissions: {\n          writeable: {type: Boolean, default: true},\n          limit: { // only avaiable for systemOnly property\n            custom: {\n              range: [Schema.Types.Mixed]\n            }\n          }\n        }\n      }],\n      displayPriority: {type: Number, min: -2}, // -1: hide, 0 : no display , 1 is max, smaller is higher\n      propertyInfo: {\n        writeable: {type: Boolean},\n        methode: {type: Boolean},\n        params: [{\n          _id: false,\n          name: {type: String },\n          displayName: {type: String },\n          description: {type: String},\n\n          type: {type: String, enum: [\n            'NUMBER', 'ARRAY_NUMBER', 'ARRAY_NUMBER_FIX',\n            'STRING', 'ARRAY_STRING', 'ARRAY_STRING_FIX',\n            'BOOLEAN', 'ARRAY_BOOLEAN', 'ARRAY_BOOLEAN_FIX',\n            'TIME', 'ARRAY_TIME', 'ARRAY_TIME_FIX',\n            'PHONE', 'ARRAY_PHONE', 'ARRAY_PHONE_FIX',\n            'ARRAY', 'DATE', 'COORDINATE', 'COLOR', 'IMAGE', 'MIX'\n          ] },\n          expr: {type: String }, // variable x\n          unit: {type: String },\n          defaultValue: Schema.Types.Mixed,\n\n          units: [{\n            _id: false,\n            expr: {type: String }, // variable x\n            invExpr: {type: String }, // variable x\n            unit: {type: String },\n            icon: {type: String }\n          }],\n\n          range: [{\n            _id: false,\n            min: Schema.Types.Mixed,\n            max: Schema.Types.Mixed,\n            step: {type: Number},\n            name: {type: String },\n            value: Schema.Types.Mixed,\n            icon: {type: String }, color: {type: String },\n            valueSetting: Schema.Types.Mixed // {notify:{title:'B\xe1o \u0111\u1ed9ng'}}\n          }]\n        }],\n\n        controlPrototype: {\n          upValueMethodeId: {type: Schema.Types.ObjectId},\n          downValueMethodeId: { type: Schema.Types.ObjectId},\n          setValueMethodeId: {type: Schema.Types.ObjectId },\n        },\n      }\n    }]\n  }\n\n}, {\n  timestamps: true,\n  minimize: false\n})\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const geoSchema = new Schema({\n    _id: false,\n    type: {\n      type: String,\n      enum: ['Point'],\n      default: 'Point'\n    },\n    coordinates: {\n      type: [Number], // long lat\n      // default: undefined\n      require: true\n    }\n  });\n")),(0,a.kt)("h2",{id:"relations"},"Relations"),(0,a.kt)("h3",{id:"schema-2"},"Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"mongooseClient.Schema({\n  _id : { type: Schema.Types.ObjectId, index: true, unique: true, required: true },\n\n  parentId: { type: Schema.Types.ObjectId, required: true},\n  parentUsername: { type: String},\n  parentType: { type: String, required: true},\n  childrenId: { type: Schema.Types.ObjectId, required: true},\n  childrenUsername: { type: String},\n  childrenType: { type: String, required: true},\n  secretKey: { type: String, required: true},\n  groupId: { type: Schema.Types.ObjectId},\n  author: { type: Schema.Types.ObjectId },\n  authorType: {type: String, enum: ['user', 'device'] },\n  roles: [String], //  ['admin'] ['manager'] // ['user'] ['guest']\n  permissions: [{\n    propertyName: { type: String },\n    forbidden: {type: Boolean, default: true},\n    limit: {\n      writeable: {type: Boolean, default: false},\n      custom: {\n        range: [Schema.Types.Mixed]\n      }\n    }\n  }],\n\n}, {\n  timestamps: true\n})\n")),(0,a.kt)("h2",{id:"devices-events"},"Devices Events"),(0,a.kt)("h3",{id:"schema-3"},"Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Schema({\n  _id : { type: Schema.Types.ObjectId, index: true, unique: true, required: true },\n  \n  deviceId: { type: Schema.Types.ObjectId, required: true },\n  productId: { type: String },\n  manufacturerId: { type: Schema.Types.ObjectId },\n  time: { type: Date, default: Date.now, index: true },\n  eventType: {type: String, required: true},\n  //  UPDATE_STATUS, UPDATE_PROPERTY, CALL_SERVICE, UPDATE_HISTORY, RESPONSE_CONTROL_PROPERTY, DEVICE_PUBLISH_LIMIT\n  //  CONTROL_DEVICE_LIMIT\n  eventDescription: {type: Schema.Types.Mixed}\n}, {\n  timestamps: true\n})\n")),(0,a.kt)("h2",{id:"user-events"},"User Events"),(0,a.kt)("h3",{id:"schema-4"},"Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Schema({\n  _id : { type: Schema.Types.ObjectId, index: true, unique: true, required: true },\n\n  userId: { type: Schema.Types.ObjectId, required: true, index: true },\n  username: { type: String },\n  manufacturerId: { type: Schema.Types.ObjectId },\n  time: { type: Date, index: true, default: Date.now },\n  eventType: { type: String, required: true, index: true},\n  eventDescription: {type: Schema.Types.Mixed},\n}, {\n  timestamps: true\n})\n")),(0,a.kt)("h2",{id:"roles"},"Roles"),(0,a.kt)("h3",{id:"schema-5"},"Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Schema({\n  _id : { type: Schema.Types.ObjectId, index: true, unique: true, required: true },\n\n  name: { type: String, unique: true, required: true, index: true },\n  permissions: [{\n    url: { type: String },\n    method: Schema.Types.Mixed,\n    forbidden: {type: Boolean, default: false},\n    limit: {\n      whiteList: [{\n        _id: false,\n        entity: { type: String },\n        idField: { type: String },\n        idValue: [Schema.Types.Mixed]\n      }],\n      blackList: [{\n        _id: false,\n        entity: { type: String },\n        idField: { type: String },\n        idValue: [Schema.Types.Mixed]\n      }],\n      restrict: [{\n        _id: false,\n        entity: { type: String },\n        idField: { type: String },\n        idValue: Schema.Types.Mixed,\n        ownerField: { type: String },\n      }],\n      skipPostRestrict: {type: Boolean, default: false},\n      custom: [{\n        _id: false,\n        field: { type: String },\n        force: Schema.Types.Mixed,\n        range: [Schema.Types.Mixed],\n        default: Schema.Types.Mixed\n      }],\n      apiOptions: Schema.Types.Mixed\n    }\n  }]\n}, {\n  timestamps: true\n})\n")))}l.isMDXComponent=!0}}]);